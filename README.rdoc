= AmountField

Rails gem/plugin that accepts (amount) values in german or us format like 1.234,56 or 1,234.56".

Only tested for Rails 2.3. It may works with older versions but I haven't tested it.
Drop me a line if you encounter problems.

== Installation

As Gem:

  $ gem sources -a http://gems.github.com (you only have to do this once)
  $ sudo gem install thomasbaustert-amount_field

As plugin:

  $ script/plugin install git://github.com/thomasbaustert/amount_field.git

== Example

First: Use the helper <tt>amount_field</tt> instead of the <tt>text_field</tt> helper:

  <% form_for(@product) do |f| %>
    <%= f.amount_field :price %>
     ...    
  <% end %>

  <% form_for(@product) do |f| %>
    <%= amount_field :product, :price %>
     ...    
  <% end %>

The helper <tt>amount_field_tag</tt> is provided too, but you have to handle the validation on
your own:

  <% form_tag(:action => "create", {}) do -%> 
    <%= amount_field_tag :price, 1234.56 %>
  ...  

Second: Use the validation macro <tt>validates_amount_format_of</tt> in your model:

  class Product < ActiveRecord::Base
    validates_amount_format_of :price
    validates_numericality_of :price
    validates_presence_of :price
    ...
  end
  
Note! Make sure you always call <tt>validates_amount_format_of</tt> *before* every 
other validation macro for the same attribute (e.g. before <tt>validates_numericality_of</tt>
and <tt>validates_presence_of</tt> for <tt>price</tt>).

== Configuration

The following configuration is supported:

=== Format Configuration

Definition:
  
  Delimiter = thousand separator (e.g. '.' in 1.234.567)
  Separator = separator of value and decimal places (e.g. ',' in 12,56)
  Precision = number of decimal places

The default format configuration is defined via Rails I18n and accessable through the key
<tt>number.amount_field.format</tt> from the file <tt>amount_field/locale/(en|de).yml</tt>. 

Example:

  I18n.locale = :de
  I18n.t('number.amount_field.format') # => { :precision => 2, :delimiter => '.', :separator => ',' }

Currently only the locale <tt>de</tt> and<tt>en</tt> are supported.

If you want to define the default configuration independent from I18n, you can set it as follows:

  AmountField::ActiveRecord::Validations.configuration = 
    { :precision => 1, :delimiter => ',', :separator => '.' }

An explicitly defined format will overwrite the default configuration for that attribute:
  
  validates_amount_format_of :price, :separator => '.', :delimiter => ',', :precision => 1
  # VALID: "1,234.5" (1234.5)

Standard Rails options like <tt>:allow_blank</tt>, or <tt>:allow_nil</tt> are supported:

  validates_amount_format_of :price, :allow_blank => true

=== CSS class and prefix
  
By default the input field contains the CSS class <tt>amount_field</tt> so you can define
a CSS layout for every amount field like:

  input.amount_field {
    text-align:right;
  }
  
The method prefix and the CSS class can be changed as follows:

  AmountField::Configuration.prefix = "my_prefix"
  AmountField::Configuration.css_class = "my_class"

That  will create the html:

  <input name="product[my_prefix_price]" class=" my_class"...

and the appropriate method <tt>my_prefix_price=(value)</tt>.

== Input

By default delimiter, separator and precision are optional, so "1.234,00", "1234,00" and "1234"
are all valid for the german locale (de) at the same time.

In all other cases the validation will fail and add an error message to the original 
attribute (e.g. <tt>price</tt>). (See Error Messages)

== Output

The helper <tt>amount_field</tt> uses the Rails helper <tt>number_with_precision</tt> internally
and passes the plugin format configuration as an argument. A value like 1234.56 is therefore
displayed as "1.234,56" for the locale <tt>de</tt> and "1,234.56" for the locale <tt>en</tt>.

You can explicitly set the format configuration with the option <tt>format</tt>:

  amount_field(:price, :format => { :separator => '', ... })
  
And it is possible to pass the value explicitly:  
  
  amount_field(:price, :value => ...)

== Error Messages

By default the german and english messages are taken from the file 
<tt>amount_field/locale/(en|de).yml</tt> through the key 
<tt>activerecord.errors.messages.invalid_amount_format</tt>.

You can define your own by adding your Yaml file to the load path like:

  # environment.rb
  I18n.load_path << "#{RAILS_ROOT}/locale/en.yml"

  # "#{RAILS_ROOT}/locale/en.yml"
  de:
    activerecord:
      errors:
        messages:
          invalid_amount_format: "bla ... '{{value}}' blub ...  ({{format_example}})"
    
The placeholder <tt>{{value}}</tt> is substituted with the given value (e.g. "1.x") and 
<tt>{{format_example}}</tt> with a valid example of the currently accepted format (e.g. 'd.ddd,dd').

== How does it work?

Basically the helper <tt>amount_field</tt> defines a input field like so:

  <input name="product[amount_field_price]" class=" amount_field"...
  
The validation macro <tt>validates_amount_format_of</tt> defines a special setter method
<tt>amount_field_price=(value)</tt> that accept the value. After successfully format 
validation the original parameter is converted to a ruby value (e.g. "1.234,56" to 1234.56)
and assigned to the original attribute <tt>price</tt>. Following validation macros work on
the converted value. That's why it is currently important to call 
<tt>validates_amount_format_of</tt> before every other macro.
  
== Running Tests

You need a database <tt>gem_amount_field_test</tt> to run all tests.
See test_helper.rb for details.

== Credits

* Michael Schiller (for feedback and ideas)
 
== Contact

For comments and question feel free to contact me: business@thomasbaustert.de

If you are using the plugin, consider recommending me at workingwithrails.com:
http://workingwithrails.com/person/6131-thomas-baustert

Copyright (c) 2009 [Thomas Baustert], released under the MIT license
